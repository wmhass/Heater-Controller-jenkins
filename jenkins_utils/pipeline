# Production
pipeline {
  environment {
    registry = "williamhass/my-first-repo"
    registryCredential = 'dockerhub'
    dockerImage = ''
  }
  agent any
  stages {
    stage('Remove Old Stack Repo') {
        steps {
            sh 'if [ -d Heater-Controller-Server-Docker-Stack ]; then rm -rf Heater-Controller-Server-Docker-Stack; fi'
        }
    }
    stage('Cloning Stack Git') {
      steps {
          sh 'if cd Heater-Controller-Server-Docker-Stack; then git pull --recurse-submodules; else git clone --recurse-submodules https://github.com/wmhass/Heater-Controller-Server-Docker-Stack.git; fi'
      }
    }
    stage('Run services tests') {
      steps {
          sh "echo TODO: Run tests for every service"
      }
    }
    stage('Build docker images') {
      steps{
        sh "Heater-Controller-Server-Docker-Stack/sh/updatestack.sh --all --build-docker-images"
      }
    }
    stage('Stop Production') {
      steps{
        sh "Heater-Controller-Server-Docker-Stack/sh/stack.sh --stop --prod"
      }
    }
    stage('Stop Dev') {
      steps{
        sh "Heater-Controller-Server-Docker-Stack/sh/stack.sh --stop --dev"
      }
    }
    stage('Run Production') {
      steps{
        sh "Heater-Controller-Server-Docker-Stack/sh/stack.sh --start --prod"
      }
    }
    stage('Run Containers Integration test') {
      steps{
          sh "echo TODO: Assert if containers are running well"
      }
    }
    stage('Push images to registry renaming :test to :stable') {
       steps{
           sh "echo TODO: Run script that pushes images to registry"
      }
    }
    stage('Deploy application in production') {
        steps{
            sh "echo TODO: Connect via SSH to the Production machine and ask to sh/updatestack.sh --all --pull-docker-image"
            sh "echo TODO: Connect via SSH to the Production machine and ask to sh/stack.sh --start --prod"
        }
    }



    // stage('Cloning Service Git') {
    //   steps {
    //     git 'https://github.com/wmhass/Heater-Controller-apps_open_api.git'
    //   }
    // }
    // stage('Building image') {
    //   steps{
    //     script {
    //       //dockerImage = docker.build service_name + ":$BUILD_NUMBER"
    //      dockerImage = docker.build service_name + ":stable"
    //     }
    //   }
    // }
    // stage('Run staging with test image') {
    //   steps{
    //     script {
    //       //dockerImage = docker.build service_name + ":$BUILD_NUMBER"
    //      sh "Heater-Controller-Server-Docker-Stack/sh/stack.sh --start --prod"
    //     }
    //   }
    // }
    // stage('Test service docker image integration') {
    //   steps{
    //     script {
    //      //TODO: Assert if the image is integrating well with the env
    //     }
    //   }
    // }
    // stage('Deploy Image') {
    //   steps{
    //     script {
    //       docker.withRegistry( '', registryCredential ) {
    //         dockerImage.push()
    //       }
    //     }
    //   }
    // }
    // stage('Remove Unused docker image') {
    //   steps{
    //     sh "docker rmi $registry:$BUILD_NUMBER"
    //   }
    // }
    // stage('Deploy application in production') {
    //     steps{
    //         //Connect via SSH to the Production machine and ask to sh/updatestack.sh --all --pull-docker-image
    //         //Connect via SSH to the Production machine and ask to sh/stack.sh --start --prod
    //     }
    // }
  }
}

# Development
pipeline {
    environment {
        host = "/sbin/ip route|awk '/default/ { print \$3 }'"
        user = "vagrant"
        command_path = "/usr/local/var/Heater-Controller-Server-Docker-Stack/sh/stack.sh"
    }
  agent any
  stages {
    stage('Stop Production') {
        steps {
            sh "export IP=\$(${host}) && ssh -t -t ${user}@\$IP \"${command_path} --stop --prod\""
        }
    }
    stage('Start Dev') {
        steps {
            sh "export IP=\$(${host}) && ssh -t -t ${user}@\$IP \"${command_path} --start --dev\""
        }
    }
  }
}
